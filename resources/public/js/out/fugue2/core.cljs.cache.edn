{:rename-macros {}, :renames {}, :externs {console {log {}}, document {getElementById {}, addEventListener {}}, Object {addEventListener {}}, Math {pow {}}}, :use-macros {go cljs.core.async}, :excludes #{}, :name fugue2.core, :imports nil, :requires {async cljs.core.async, cljs.core.async cljs.core.async, async-midi fugue2.async, fugue2.async fugue2.async, a fugue2.audio, fugue2.audio fugue2.audio}, :cljs.spec/speced-vars [], :uses {<! cljs.core.async}, :defs {key-tracked-osc {:protocol-inline nil, :meta {:file "/Users/pdv/fugue2/src/fugue2/core.cljs", :line 139, :column 8, :end-line 139, :end-column 23, :private true, :arglists (quote ([]))}, :private true, :name fugue2.core/key-tracked-osc, :variadic false, :file "src/fugue2/core.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 139, :end-line 139, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, play-loop {:protocol-inline nil, :meta {:file "/Users/pdv/fugue2/src/fugue2/core.cljs", :line 49, :column 7, :end-line 49, :end-column 16, :arglists (quote ([pattern tempo]))}, :name fugue2.core/play-loop, :variadic false, :file "src/fugue2/core.cljs", :end-column 16, :method-params ([pattern tempo]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pattern tempo]))}, note->hz {:protocol-inline nil, :meta {:file "/Users/pdv/fugue2/src/fugue2/core.cljs", :line 120, :column 7, :end-line 120, :end-column 15, :arglists (quote ([note]))}, :name fugue2.core/note->hz, :variadic false, :file "src/fugue2/core.cljs", :end-column 15, :method-params ([note]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 120, :end-line 120, :max-fixed-arity 1, :fn-var true, :arglists (quote ([note]))}, main {:protocol-inline nil, :meta {:file "/Users/pdv/fugue2/src/fugue2/core.cljs", :line 150, :column 7, :end-line 150, :end-column 11, :arglists (quote ([]))}, :name fugue2.core/main, :variadic false, :file "src/fugue2/core.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 150, :end-line 150, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, load-samples {:protocol-inline nil, :meta {:file "/Users/pdv/fugue2/src/fugue2/core.cljs", :line 109, :column 7, :end-line 109, :end-column 19, :arglists (quote ([samples]))}, :name fugue2.core/load-samples, :variadic false, :file "src/fugue2/core.cljs", :end-column 19, :method-params ([samples]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 109, :end-line 109, :max-fixed-arity 1, :fn-var true, :arglists (quote ([samples]))}, pattern {:name fugue2.core/pattern, :file "src/fugue2/core.cljs", :line 78, :column 1, :end-line 78, :end-column 13, :meta {:file "/Users/pdv/fugue2/src/fugue2/core.cljs", :line 78, :column 6, :end-line 78, :end-column 13}, :tag cljs.core/IVector}, sequencer {:name fugue2.core/sequencer, :file "src/fugue2/core.cljs", :line 72, :column 1, :end-line 72, :end-column 15, :meta {:file "/Users/pdv/fugue2/src/fugue2/core.cljs", :line 72, :column 6, :end-line 72, :end-column 15}, :tag cljs.core/IVector}, sample-map {:name fugue2.core/sample-map, :file "src/fugue2/core.cljs", :line 62, :column 1, :end-line 62, :end-column 16, :meta {:file "/Users/pdv/fugue2/src/fugue2/core.cljs", :line 62, :column 6, :end-line 62, :end-column 16}, :tag cljs.core/IMap}, samples {:name fugue2.core/samples, :file "src/fugue2/core.cljs", :line 103, :column 1, :end-line 103, :end-column 13, :meta {:file "/Users/pdv/fugue2/src/fugue2/core.cljs", :line 103, :column 6, :end-line 103, :end-column 13}, :tag cljs.core/IVector}, detuned-synth! {:protocol-inline nil, :meta {:file "/Users/pdv/fugue2/src/fugue2/core.cljs", :line 7, :column 7, :end-line 7, :end-column 21, :arglists (quote ([]))}, :name fugue2.core/detuned-synth!, :variadic false, :file "src/fugue2/core.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, test-sample {:protocol-inline nil, :meta {:file "/Users/pdv/fugue2/src/fugue2/core.cljs", :line 35, :column 7, :end-line 35, :end-column 18, :arglists (quote ([]))}, :name fugue2.core/test-sample, :variadic false, :file "src/fugue2/core.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, play-simple-sample! {:protocol-inline nil, :meta {:file "/Users/pdv/fugue2/src/fugue2/core.cljs", :line 89, :column 7, :end-line 89, :end-column 26, :arglists (quote ([]))}, :name fugue2.core/play-simple-sample!, :variadic false, :file "src/fugue2/core.cljs", :end-column 26, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 89, :end-line 89, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, feedback {:protocol-inline nil, :meta {:file "/Users/pdv/fugue2/src/fugue2/core.cljs", :line 24, :column 7, :end-line 24, :end-column 15, :arglists (quote ([src mod]))}, :name fugue2.core/feedback, :variadic false, :file "src/fugue2/core.cljs", :end-column 15, :method-params ([src mod]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 2, :fn-var true, :arglists (quote ([src mod]))}, test-gate {:protocol-inline nil, :meta {:file "/Users/pdv/fugue2/src/fugue2/core.cljs", :line 27, :column 7, :end-line 27, :end-column 16, :arglists (quote ([]))}, :name fugue2.core/test-gate, :variadic false, :file "src/fugue2/core.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, start-synth! {:protocol-inline nil, :meta {:file "/Users/pdv/fugue2/src/fugue2/core.cljs", :line 18, :column 7, :end-line 18, :end-column 19, :arglists (quote ([]))}, :name fugue2.core/start-synth!, :variadic false, :file "src/fugue2/core.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, sampler {:protocol-inline nil, :meta {:file "/Users/pdv/fugue2/src/fugue2/core.cljs", :line 66, :column 7, :end-line 66, :end-column 14, :arglists (quote ([]))}, :name fugue2.core/sampler, :variadic false, :file "src/fugue2/core.cljs", :end-column 14, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, start {:protocol-inline nil, :meta {:file "/Users/pdv/fugue2/src/fugue2/core.cljs", :line 94, :column 7, :end-line 94, :end-column 12, :arglists (quote ([]))}, :name fugue2.core/start, :variadic false, :file "src/fugue2/core.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 94, :end-line 94, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, keymap {:name fugue2.core/keymap, :file "src/fugue2/core.cljs", :line 124, :column 1, :end-line 124, :end-column 12, :meta {:file "/Users/pdv/fugue2/src/fugue2/core.cljs", :line 124, :column 6, :end-line 124, :end-column 12}, :tag any}, test-key-tracking {:protocol-inline nil, :meta {:file "/Users/pdv/fugue2/src/fugue2/core.cljs", :line 144, :column 8, :end-line 144, :end-column 25, :private true, :arglists (quote ([]))}, :private true, :name fugue2.core/test-key-tracking, :variadic false, :file "src/fugue2/core.cljs", :end-column 25, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 144, :end-line 144, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, setup-button-listeners {:protocol-inline nil, :meta {:file "/Users/pdv/fugue2/src/fugue2/core.cljs", :line 113, :column 8, :end-line 113, :end-column 30, :private true, :arglists (quote ([]))}, :private true, :name fugue2.core/setup-button-listeners, :variadic false, :file "src/fugue2/core.cljs", :end-column 30, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 113, :end-line 113, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, dubstep-bass {:protocol-inline nil, :meta {:file "/Users/pdv/fugue2/src/fugue2/core.cljs", :line 13, :column 7, :end-line 13, :end-column 19, :arglists (quote ([]))}, :name fugue2.core/dubstep-bass, :variadic false, :file "src/fugue2/core.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, test-sample-loop {:protocol-inline nil, :meta {:file "/Users/pdv/fugue2/src/fugue2/core.cljs", :line 40, :column 7, :end-line 40, :end-column 23, :arglists (quote ([]))}, :name fugue2.core/test-sample-loop, :variadic false, :file "src/fugue2/core.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, stop {:protocol-inline nil, :meta {:file "/Users/pdv/fugue2/src/fugue2/core.cljs", :line 99, :column 7, :end-line 99, :end-column 11, :arglists (quote ([]))}, :name fugue2.core/stop, :variadic false, :file "src/fugue2/core.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 99, :end-line 99, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, key-tracked-const {:protocol-inline nil, :meta {:file "/Users/pdv/fugue2/src/fugue2/core.cljs", :line 127, :column 8, :end-line 127, :end-column 25, :private true, :arglists (quote ([]))}, :private true, :name fugue2.core/key-tracked-const, :variadic false, :file "src/fugue2/core.cljs", :end-column 25, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 127, :end-line 127, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :cljs.spec/registry-ref [], :require-macros {cljs.core.async cljs.core.async, async cljs.core.async}, :cljs.analyzer/constants {:seen #{:else :offset :scale :recur :sample :seq}, :order [:scale :offset :sample :seq :recur :else]}, :doc nil}