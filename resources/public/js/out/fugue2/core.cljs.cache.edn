{:rename-macros {}, :renames {}, :externs {console {log {}}, document {getElementById {}}, Object {addEventListener {}}}, :use-macros {}, :excludes #{}, :name fugue2.core, :imports nil, :requires {a fugue2.audio, fugue2.audio fugue2.audio}, :cljs.spec/speced-vars [], :uses nil, :defs {detuned-synth! {:protocol-inline nil, :meta {:file "/Users/pdv/fugue2/src/fugue2/core.cljs", :line 4, :column 7, :end-line 4, :end-column 21, :arglists (quote ([]))}, :name fugue2.core/detuned-synth!, :variadic false, :file "src/fugue2/core.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4, :end-line 4, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, dubstep-bass {:protocol-inline nil, :meta {:file "/Users/pdv/fugue2/src/fugue2/core.cljs", :line 10, :column 7, :end-line 10, :end-column 19, :arglists (quote ([]))}, :name fugue2.core/dubstep-bass, :variadic false, :file "src/fugue2/core.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, start-synth! {:protocol-inline nil, :meta {:file "/Users/pdv/fugue2/src/fugue2/core.cljs", :line 15, :column 7, :end-line 15, :end-column 19, :arglists (quote ([]))}, :name fugue2.core/start-synth!, :variadic false, :file "src/fugue2/core.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, feedback {:protocol-inline nil, :meta {:file "/Users/pdv/fugue2/src/fugue2/core.cljs", :line 21, :column 7, :end-line 21, :end-column 15, :arglists (quote ([src mod]))}, :name fugue2.core/feedback, :variadic false, :file "src/fugue2/core.cljs", :end-column 15, :method-params ([src mod]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 2, :fn-var true, :arglists (quote ([src mod]))}, test-gate {:protocol-inline nil, :meta {:file "/Users/pdv/fugue2/src/fugue2/core.cljs", :line 24, :column 7, :end-line 24, :end-column 16, :arglists (quote ([]))}, :name fugue2.core/test-gate, :variadic false, :file "src/fugue2/core.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, test-sample {:protocol-inline nil, :meta {:file "/Users/pdv/fugue2/src/fugue2/core.cljs", :line 32, :column 7, :end-line 32, :end-column 18, :arglists (quote ([]))}, :name fugue2.core/test-sample, :variadic false, :file "src/fugue2/core.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, start {:protocol-inline nil, :meta {:file "/Users/pdv/fugue2/src/fugue2/core.cljs", :line 37, :column 7, :end-line 37, :end-column 12, :arglists (quote ([]))}, :name fugue2.core/start, :variadic false, :file "src/fugue2/core.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, stop {:protocol-inline nil, :meta {:file "/Users/pdv/fugue2/src/fugue2/core.cljs", :line 41, :column 7, :end-line 41, :end-column 11, :arglists (quote ([]))}, :name fugue2.core/stop, :variadic false, :file "src/fugue2/core.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :cljs.spec/registry-ref [], :require-macros nil, :doc nil}